// Generated by CoffeeScript 1.12.7
(function() {
  var Story,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Story = (function() {
    function Story() {
      this.doEntityEffects = bind(this.doEntityEffects, this);
      this.reqs = new Requirements(this);
      this.effs = new Effects(this);
      $('#game').hide();
    }

    Story.prototype.startGame = function() {
      var code, e, firstError, ref;
      this.partyFlags = {};
      this.entities = [];
      this.eventCounts = {};
      try {
        code = window.firepad.getText().split('\n');
        ref = Parser.parse(code), config.events = ref[0], this.errors = ref[1];
        if (this.errors.length > 0) {
          firstError = this.errors[0];
          $('#errors').html(this.errors.length + " ERRORS - " + firstError.text + ":" + firstError.lineIdx).show();
          return false;
        } else {
          $('#errors').hide();
        }
        $('#editor').hide();
        $('#help').hide();
        $('#gameText').empty();
        $('#startButton').hide();
        $('#editButton').show();
        $('#game').show();
        return this.showEvent(config.events[0]);
      } catch (error) {
        e = error;
        alert(e.message);
        return false;
      }
    };

    Story.prototype.editGame = function() {
      $('#game').hide();
      $('#help').show();
      $('#editor').show();
      $('#startButton').show();
      return $('#editButton').hide();
    };

    Story.prototype.addEntity = function() {
      var newEntity;
      newEntity = new Entity();
      this.entities.push(newEntity);
      return newEntity;
    };

    Story.prototype.showEvent = function(eventId) {
      var action, actionIdx, base, i, len, ref;
      $('#gameText .action').remove();
      $('#gameImage').hide();
      $('#gameText p').addClass('old');
      this.actions = [];
      if (Object.isString(eventId)) {
        if ((base = this.eventCounts)[eventId] == null) {
          base[eventId] = 0;
        }
        this.eventCounts[eventId] += 1;
      }
      this.doEvent(Proto.getEvent(eventId));
      ref = this.actions;
      for (actionIdx = i = 0, len = ref.length; i < len; actionIdx = ++i) {
        action = ref[actionIdx];
        $('#gameText').append("<p class='action'> <a onClick=\"doAction('" + actionIdx + "'); return false;\" href=''> " + action.actionText + " </a> </p>");
      }
      if (this.actions.length === 0) {
        return $('#gameText').append("<p><a class=start href='' onClick='startGame(); return false;'>New Game</a></p>");
      }
    };

    Story.prototype.doAction = function(actionIdx) {
      var action;
      action = this.actions[actionIdx];
      return this.showEvent(action);
    };

    Story.prototype.hasRequirements = function(event, entity) {
      var cmd, i, len, ref, ref1;
      Core.assert(Object.isObject(event));
      ref = event.commands;
      for (i = 0, len = ref.length; i < len; i++) {
        cmd = ref[i];
        if (cmd.op.startsWith('req')) {
          Core.assert(this.reqs[cmd.op] != null, "Unknown requirement " + cmd.op);
          if (!this.reqs[cmd.op](cmd.arg, entity)) {
            console.warn("failed requirement " + cmd.op + " for event " + ((ref1 = event.id) != null ? ref1 : 'inline'));
            return false;
          }
        }
      }
      if (!this.doEntityEffects(event.effects, true)) {
        return false;
      }
      return true;
    };

    Story.prototype.expandEvent = function(def) {
      if (def.ref != null) {
        return Proto.getEvent(def.ref);
      } else if (Object.isObject(def)) {
        return def;
      } else {
        return Proto.getEvent(def);
      }
    };

    Story.prototype.randEvent = function(eventSet, ctx) {
      var eventSlots, group, prio, randEvt, ref;
      ref = Core.arrify(eventSet).groupBy(function(e) {
        var ref;
        return (ref = e.prio) != null ? ref : 100;
      });
      for (prio in ref) {
        group = ref[prio];
        eventSlots = Core.arrify(group).map((function(_this) {
          return function(e) {
            var evt, ref1;
            evt = _this.expandEvent(e);
            return {
              evt: evt,
              canDo: _this.hasRequirements(evt),
              slots: (ref1 = e.slots) != null ? ref1 : 1
            };
          };
        })(this));
        eventSlots.remove(function(def) {
          return !def.canDo;
        });
        if (!eventSlots.isEmpty()) {
          break;
        }
      }
      if (eventSlots != null) {
        randEvt = this.randEntry(eventSlots);
        if (randEvt != null) {
          return randEvt.evt;
        }
      }
      return null;
    };

    Story.prototype.randEntry = function(slotDefs, ctx) {
      var entry, i, len, ref, targetChance, totalSlots;
      if (ctx == null) {
        ctx = {};
      }
      totalSlots = slotDefs.sum(function(e) {
        var ref;
        return (ref = e.slots) != null ? ref : 1;
      });
      targetChance = Math.random() * totalSlots;
      for (i = 0, len = slotDefs.length; i < len; i++) {
        entry = slotDefs[i];
        targetChance -= (ref = entry.slots) != null ? ref : 1;
        if (targetChance <= 0 || totalSlots === 0) {
          return entry;
        }
      }
      return null;
    };

    Story.prototype.doCommands = function(entry) {
      var cmd, i, len, ref;
      ref = entry.commands;
      for (i = 0, len = ref.length; i < len; i++) {
        cmd = ref[i];
        if (this.effs[cmd.op] != null) {
          this.effs[cmd.op](cmd.arg);
        }
      }
    };

    Story.prototype.addText = function(txt, entity) {
      var klass;
      klass = entity != null ? 'special' : '';
      if (txt != null) {
        txt = TextHelper.parse(txt);
        if (entity != null) {
          txt = TextHelper.replaceAtts(txt, entity.attributes);
        }
        return $('#gameText').append("<p class=" + klass + ">" + txt + "</p>");
      }
    };

    Story.prototype.doEvent = function(event, entity) {
      var action, actionId, i, len, nextEventRef, ref;
      Core.assert(Object.isObject(event));
      if (event.id != null) {
        console.log("do event [" + event.id + "]");
      }
      this.addText(event.text, entity);
      this.doCommands(event);
      this.doEntityEffects(event.effects);
      ref = Core.arrify(event.actions);
      for (i = 0, len = ref.length; i < len; i++) {
        actionId = ref[i];
        action = Proto.getEvent(actionId);
        if (this.hasRequirements(action)) {
          this.actions.push(action);
        }
      }
      nextEventRef = this.randEvent(event.events);
      if (nextEventRef != null) {
        return this.doEvent(nextEventRef);
      }
    };

    Story.prototype.doEntityEffects = function(effects, testOnly) {
      var allEntities, consumedEntities, count, eff, ent, entities, evt, failed, i, j, len, len1, maxCount, minCount, optional, ref, ref1, ref2, ref3, ref4;
      if (testOnly == null) {
        testOnly = false;
      }
      if (effects == null) {
        return true;
      }
      consumedEntities = [];
      ref = Core.arrify(effects);
      for (i = 0, len = ref.length; i < len; i++) {
        eff = ref[i];
        optional = (ref1 = eff.optional) != null ? ref1 : true;
        if (optional && testOnly) {
          continue;
        }
        evt = this.expandEvent(eff);
        allEntities = this.entities;
        entities = allEntities.filter((function(_this) {
          return function(ent) {
            if (indexOf.call(consumedEntities, ent) >= 0) {
              return false;
            }
            return _this.hasRequirements(evt, ent);
          };
        })(this));
        count = (ref2 = evt.count) != null ? ref2 : 1;
        failed = false;
        if (count === 'all') {
          if (entities.length < allEntities.length) {
            if (optional) {
              continue;
            } else {
              return false;
            }
          }
        } else if (count === 'any') {

        } else {
          ref3 = Core.parseRange(count), minCount = ref3[0], maxCount = ref3[1];
          if (entities.length < minCount) {
            if (optional) {
              continue;
            } else {
              return false;
            }
          }
          entities = entities.sample(maxCount);
        }
        if (entities.isEmpty()) {
          if (optional) {
            continue;
          } else {
            return false;
          }
        }
        if (!testOnly) {
          if ((evt.chance != null) && Math.random() > evt.chance) {
            continue;
          }
          ref4 = entities.randomize();
          for (j = 0, len1 = ref4.length; j < len1; j++) {
            ent = ref4[j];
            this.doEvent(evt, ent);
            if (eff.consume) {
              consumedPersons.push(ch);
            }
          }
        }
      }
      return true;
    };

    return Story;

  })();

  if (typeof window !== "undefined" && window !== null) {
    window.doAction = function(actionIdx) {
      window.story.doAction(actionIdx);
      return false;
    };
    window.startGame = function() {
      return window.story.startGame();
    };
    window.editGame = function() {
      return window.story.editGame();
    };
    window.help = function() {
      return window.story.showHelp();
    };
    window.onload = function() {
      return window.story = new Story;
    };
  }

}).call(this);
