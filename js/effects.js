// Generated by CoffeeScript 1.6.2
(function() {
  var Effects, Entity, Requirements, root;

  Entity = (function() {
    function Entity() {
      this.attributes = {};
    }

    return Entity;

  })();

  Effects = (function() {
    function Effects(story) {
      this.story = story;
    }

    Effects.prototype.setPartyFlags = function(flags, entity) {
      return Core.setFlags(flags, this.story.partyFlags);
    };

    Effects.prototype.setFlags = function(flags, entity) {
      var flagSet;

      flagSet = entity != null ? entity.partyFlags : this.story.partyFlags;
      return Core.setFlags(flags, flagSet);
    };

    Effects.prototype.setVar = function(atts, entity) {
      return Object.merge(entity.attributes, Parser.parseAtts(atts));
    };

    Effects.prototype.addEntity = function(atts) {
      var newEntity;

      newEntity = this.story.addEntity();
      return Object.merge(newEntity.attributes, Parser.parseAtts(atts));
    };

    Effects.prototype.image = function(img) {
      return $('#gameImage').css('background-image', "url(" + img).fadeIn();
    };

    return Effects;

  })();

  Requirements = (function() {
    function Requirements(story) {
      this.story = story;
    }

    Requirements.prototype.reqPartyFlags = function(flags) {
      return Core.checkFlags(flags, this.story.partyFlags);
    };

    Requirements.prototype.reqVar = function(atts, entity) {
      var attrSet, key, val;

      attrSet = Parser.parseAtts(atts);
      for (key in attrSet) {
        val = attrSet[key];
        if (entity.attributes[key] !== val) {
          return false;
        }
      }
      return true;
    };

    Requirements.prototype.reqFlags = function(flags, entity) {
      var flagSet;

      flagSet = entity != null ? entity.partyFlags : this.story.partyFlags;
      return Core.checkFlags(flags, flagSet);
    };

    return Requirements;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Requirements = Requirements;

  root.Effects = Effects;

  root.Entity = Entity;

}).call(this);
